name: CI/CD

on:
  push:
    paths:
      - "**.php"
      - "**.vue"
      - "**.js"
      - "**ci.yml"
  pull_request: ~
  workflow_dispatch: ~

jobs:
  apiPlatform-tests:
    name: Tests API PALTFORM
    runs-on:
      ubuntu-latest
      # Service containers to run with `container-job`
    #  services:
    #   # Label used to access the service container
    #   postgres:
    #     # Docker Hub image
    #     image: postgres
    #     # Provide the password for postgres
    #     # ${{ env.APP_SECRET }}
    #     env:
    #       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #       POSTGRES_DB: api
    #       POSTGRES_USER: api-platform
    #     # Set health checks to wait until postgres has started
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       # Maps tcp port 5432 on service container to the host
    #       - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"

      - name: Install Composer dependencies
        working-directory: api
        run: composer install

      # - name: Connect to PostgreSQL
      # working-directory: api
      # # Runs a script that creates a PostgreSQL table, populates
      # # the table with data, and then retrieves the data.
      # run: |
      #   php bin/console doctrine:schema:update --force
      #   php bin/console doctrine:fixtures:load -n
      # # Environment variables used by the `client.js` script to create a new PostgreSQL table.
      # env:
      #   # The hostname used to communicate with the PostgreSQL service container
      #   POSTGRES_HOST: localhost
      #   # The default PostgreSQL port
      #   POSTGRES_PORT: 5432

      - name: Run PHPUnit tests
        working-directory: api
        # needs:
        #   - postgres
        run: php vendor/bin/phpunit

  node-test:
    name: Tests Node
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install dependencies
        working-directory: client
        run: npm install

      # - name: Run NPM tests
      #   run: npm run test

  publish-docker:
    runs-on: ubuntu-latest

    needs:
      - apiPlatform-tests
      # - node-test

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3

        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/challenge-s1:latest

  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./api
    # needs: apiPlatform-tests

    steps:
      - uses: actions/checkout@v3

      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "challenge-s1" #Must be unique in Heroku
          heroku_email: "taguemountkamelia094@gmail.com"
          appdir: "api"

  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 14

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build application
  # run: npm run build
  # - name: Pull images
  #   run: docker compose pull --ignore-pull-failures || true
  # - name: Start services
  #   run: docker compose up --build -d
  # - name: Wait for services
  #   run: |
  #     while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
  #       case $status in
  #         starting) sleep 1;;
  #         healthy) exit 0;;
  #         unhealthy)
  #           docker compose ps
  #           docker compose logs
  #           exit 1
  #         ;;
  #       esac
  #     done
  #     exit 1
  # - name: Check HTTP reachability
  #   run: curl -v -o /dev/null http://localhost
  # - name: Check HTTPS reachability
  #   run: curl  -vk -o /dev/null https://localhost
  # - name: Create test database
  #   run: |
  #     docker compose exec -T php php bin/console -e test doctrine:database:create
  #     docker compose exec -T php php bin/console -e test doctrine:migrations:migrate --no-interaction
  # - name: PHPUnit
  #   run: docker compose exec -T php php bin/phpunit
  # - name: Doctrine Schema Validator
  #   run: docker compose exec -T php php bin/console doctrine:schema:validate --skip-sync
  # - name: Jest
  #   run: docker compose exec -T pwa yarn test --ci --passWithNoTests
