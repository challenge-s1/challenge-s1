<?php
// api/tests/BooksTest.php

namespace App\Tests;

use ApiPlatform\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\MasterClass;



class MasterClassesTest extends ApiTestCase
{
    // public function testGetCollection(): void
    // {
    //     // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
    //     $response = static::createClient()->request('GET', '/master_classes');

    //     $this->assertResponseIsSuccessful();
    //     // Asserts that the returned content type is JSON-LD (the default)
    //     // $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

    //     // $this->assertJsonContains([
    //     //     '@context' => '/contexts/MasterClass',
    //     //     '@id' => '/master_classes',
    //     //     '@type' => 'hydra:Collection',
    //     //     'hydra:totalItems' => 11
    //     // ]);

    //     // Because test fixtures are automatically loaded between each test, you can assert on them
    //     // $this->assertCount(30, $response->toArray()['hydra:member']);

    //     // Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
    //     // This generated JSON Schema is also used in the OpenAPI spec!
    //     $this->assertMatchesResourceCollectionJsonSchema(MasterClass::class);
    // }

    // public function testCreateMasterClass(): void
    // {
    //     $client = self::createClient();
    //     $loginResponse = $client->request('POST', '/authentication_token', ['json' => [
    //         'email' => 'cake1@gmail.com',
    //         'password' => 'test',
    //     ]]);
    //     $json = $loginResponse->toArray();
    //     $this->assertResponseIsSuccessful();
    //     $this->assertArrayHasKey('token', $json);

    //     $postResponse = static::createClient()->request('POST', '/master_classes', ['auth_bearer' => $json['token']], ['json' => [
    //         "title" => "string",
    //         "description" => "string",
    //         "price" => 0,
    //         "maxNumber" => 0,
    //         "date" => "2023-02-09T07:10:28.502Z",
    //         "time" => "2023-02-09T07:10:28.502Z",
    //         "adress" => "string",
    //         "city" => "string",
    //         "postalcode" => 0,
    //         "country" => "string"
    //     ]]);

    //     $this->assertResponseStatusCodeSame(201);
    //     // $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
    //     // $this->assertJsonContains([
    //     //     '@context' => '/contexts/Book',
    //     //     '@type' => 'Book',
    //     //     'isbn' => '0099740915',
    //     //     'title' => 'The Handmaid\'s Tale',
    //     //     'description' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
    //     //     'author' => 'Margaret Atwood',
    //     //     'publicationDate' => '1985-07-31T00:00:00+00:00',
    //     //     'reviews' => [],
    //     // ]);
    //     // $this->assertMatchesRegularExpression('~^/books/\d+$~', $response->toArray()['@id']);
    //     // $this->assertMatchesResourceItemJsonSchema(Book::class);
    // }

    //     public function testCreateInvalidBook(): void
    //     {
    //         static::createClient()->request('POST', '/books', ['json' => [
    //             'isbn' => 'invalid',
    //         ]]);

    //         $this->assertResponseStatusCodeSame(422);
    //         $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

    //         $this->assertJsonContains([
    //             '@context' => '/contexts/ConstraintViolationList',
    //             '@type' => 'ConstraintViolationList',
    //             'hydra:title' => 'An error occurred',
    //             'hydra:description' => 'isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.
    // title: This value should not be blank.
    // description: This value should not be blank.
    // author: This value should not be blank.
    // publicationDate: This value should not be null.',
    //         ]);
    //     }

    //     public function testUpdateBook(): void
    //     {
    //         $client = static::createClient();
    //         // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
    //         // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
    //         // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
    //         $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

    //         $client->request('PUT', $iri, ['json' => [
    //             'title' => 'updated title',
    //         ]]);

    //         $this->assertResponseIsSuccessful();
    //         $this->assertJsonContains([
    //             '@id' => $iri,
    //             'isbn' => '9781344037075',
    //             'title' => 'updated title',
    //         ]);
    //     }

    //     public function testDeleteBook(): void
    //     {
    //         $client = static::createClient();
    //         $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

    //         $client->request('DELETE', $iri);

    //         $this->assertResponseStatusCodeSame(204);
    //         $this->assertNull(
    //             // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
    //             static::getContainer()->get('doctrine')->getRepository(Book::class)->findOneBy(['isbn' => '9781344037075'])
    //         );
    //     }

    //     public function testLogin(): void
    //     {
    //         $response = static::createClient()->request('POST', '/login', ['json' => [
    //             'email' => 'admin@example.com',
    //             'password' => 'admin',
    //         ]]);

    //         $this->assertResponseIsSuccessful();
    //     }
}
